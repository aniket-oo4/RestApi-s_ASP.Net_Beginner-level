
Here is a sample code for CRUD operations with Countries table.
CountryRepo.txt
You can do similar operations on States table
Connection string can be stored in ConnectionStrings section of web.config file and read from there.
 <configuration>
  <connectionStrings>
    <add name="DefaultConnection" 
         connectionString="Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;" 
         providerName="System.Data.SqlClient" />
  </connectionStrings>
</configuration>

using System.Configuration; 
public class ConnectionStringReader
{
    public static string GetConnectionString(string name)
    {
        return ConfigurationManager.ConnectionStrings[name].ConnectionString;
    }
} 

// Usage
string connectionString = ConnectionStringReader.GetConnectionString("DefaultConnection"); 

Let me know if you face any difficulties
 
****************************************************************88888888







using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;


namespace Sample.Data
{


    public class CountryDTO
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Capital { get; set; }
        public int Population { get; set; }
    }


    public interface ICountryRepository
    {
        IEnumerable<CountryDTO> GetAllCountries();
        CountryDTO GetCountry(int id);
        int CreateCountry(CountryDTO country);
        void UpdateCountry(int id, CountryDTO country);
        bool DeleteCountry(int id);
    }


    public class CountryRepository : ICountryRepository
    {
        private readonly string _connectionString;

        public CountryRepository(string connectionString)
        {
            _connectionString = connectionString;
        }

        public IEnumerable<CountryDTO> GetAllCountries()
        {
            var countries = new List<CountryDTO>();
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("SELECT Id, Name, Capital, Population FROM Countries", connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            countries.Add(new CountryDTO
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Capital = reader.GetString(2),
                                Population = reader.GetInt32(3)
                            });
                        }
                    }
                }
            }
            return countries;
        }

        public CountryDTO GetCountry(int id)
        {
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("SELECT Id, Name, Capital, Population FROM Countries WHERE Id = @Id", connection))
                {
                    command.Parameters.Add("@Id", SqlDbType.Int).Value = id;
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new CountryDTO
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Capital = reader.GetString(2),
                                Population = reader.GetInt32(3)
                            };
                        }
                    }
                }
            }
            return null;
        }

        public int CreateCountry(CountryDTO country)
        {
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("INSERT INTO Countries (Name, Capital, Population) VALUES (@Name, @Capital, @Population); SELECT SCOPE_IDENTITY()", connection))
                {
                    command.Parameters.Add("@Name", SqlDbType.NVarChar).Value = country.Name;
                    command.Parameters.Add("@Capital", SqlDbType.NVarChar).Value = country.Capital;
                    command.Parameters.Add("@Population", SqlDbType.Int).Value = country.Population;

                    return Convert.ToInt32(command.ExecuteScalar());
                }
            }
        }

        public void UpdateCountry(int id, CountryDTO country)
        {
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("UPDATE Countries SET Name = @Name, Capital = @Capital, Population = @Population WHERE Id = @Id", connection))
                {
                    command.Parameters.Add("@Id", SqlDbType.Int).Value = id;
                    command.Parameters.Add("@Name", SqlDbType.NVarChar).Value = country.Name;
                    command.Parameters.Add("@Capital", SqlDbType.NVarChar).Value = country.Capital;
                    command.Parameters.Add("@Population", SqlDbType.Int).Value = country.Population;

                    command.ExecuteNonQuery();
                }
            }
        }

        public bool DeleteCountry(int id)
        {
            using (SqlConnection connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand("DELETE FROM Countries WHERE Id = @Id", connection))
                {
                    command.Parameters.Add("@Id", SqlDbType.Int).Value = id;

                    return command.ExecuteNonQuery() > 0;
                }
            }
        }
    }
}